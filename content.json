{"meta":{"title":"","subtitle":"","description":"","author":"Adam","url":"http://example.com","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2022-01-28T11:46:29.686Z","updated":"2022-01-28T09:42:54.274Z","comments":false,"path":"/404.html","permalink":"http://example.com/404.html","excerpt":"","text":""},{"title":"分类","date":"2022-01-28T11:47:21.183Z","updated":"2022-01-28T09:42:54.275Z","comments":false,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2022-01-28T11:47:21.214Z","updated":"2022-01-28T09:42:54.275Z","comments":false,"path":"repository/index.html","permalink":"http://example.com/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2022-01-28T11:47:21.198Z","updated":"2022-01-28T09:42:54.275Z","comments":false,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"About","date":"2022-01-28T09:14:21.000Z","updated":"2022-01-28T11:53:53.494Z","comments":false,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"一个iOS开发, 养了一只猫叫大头。每天写写Bug，改改Bug。没事自己倒腾点感兴趣的事情。"}],"posts":[{"title":"Pod install vs. Pod update (译）","slug":"Pod-install-vs-Pod-update-译","date":"2022-01-28T11:51:40.000Z","updated":"2022-01-28T11:54:15.820Z","comments":true,"path":"2022/01/28/Pod-install-vs-Pod-update-译/","link":"","permalink":"http://example.com/2022/01/28/Pod-install-vs-Pod-update-%E8%AF%91/","excerpt":"","text":"简介很多人开始使用 CocoaPods 认为 pod install 只在第一次使用 CocoaPods 新建项目的时候使用，然后使用 pod update 。这么理解完全不对。 这片文章的目的就是来解释什么时候你应该使用 pod install 和 什么时候你应该使用 pod update 。 TL;DR: 使用 pod install 来在你的项目中 安装新的 pods 。即使你已经有 Podfile 并且先前已经运行过 pod install 命令; 即便你刚使用 CocoaPods 向项目中添加/删除 Pods。 在你想去更新Pods到一个最新的版本的时候才使用 pod update [PODNAME] 命令详细说明 注意: install vs. update 这两个单词不单单是 CocoaPods 专有。它们是受很多其他依赖管理工具的启发，例如 bundler , RubyGems 和 composer , 它们也有着同样类似的命令，拥有着相同的行为和意图。 pod install 命令这个命令经常是在第一次去检查你项目中的 Pods时候使用，也是每次你编辑你的 Podfile 去添加、更新、删除一个pod的时候使用。 每次 pod install 命令运行的时候 - 下载并且安装新的pods库 - 它将每一个安装的pod版本写入 Podfile.lock 文件。这个 Podfile.lock 文件追踪安装的每一个pod库的版本并且锁定这些版本号。 当你使用 pod install ，它仅仅处理未存在于 Podfile.lock 中的依赖pod库。 对于存在于 Podlock.file 中的pod库，该指令只下载 Podfile.lock 中指定版本的对应Pod库，并不会尝试去检查是否有最新的版本可用。 对于不存在于 Podlock.file 中的pod库，该指令在 Podfile 中查找该Pod库的版本描述（比如： pod &#39;MyPod&#39;, &#39;~&gt;1.2&#39; ）。 pod outdated 命令当运行命令 pod outdated , CocoaPods 将列出所有 Podfile.lock （包含当前项目中安装Pod库版本信息）文件有新版本可用的Pod库列表。这意味着加入你运行 pod update PODNAME 命令（PODNAME为前面命令列出的Pod库列表），这些Pod库将会被升级到最新版本 - 只要这个最新的版本仍然符合项目中 Podfile 版本约束规则，例如 pod &#39;MyPod&#39;, &#39;~&gt;x.y&#39; 。 命令运行后你能看到这样的颜色Tag输出帮助你更快的查看哪些Pod会在你 pod update 命令后进行改变。 1234The color indicates what happens when you run `pod update`&lt;green&gt; - Will be updated to the newest version&lt;blue&gt; - Will be updated, but not to the newest version because of specified version in Podfile&lt;red&gt; - Will not be updated because of specified version in Podfile pod update 命令当运行命令 pod update PODNAME ，CocoaPods 将尝试去查找名字为 PODNAME 的Pod库的最新版本，并不会去查阅 Podfile.lock 文件中的该Pod库的版本信息。命令将更新这个Pod库到最新可用的版本（只要这个最新的版本仍然符合项目中 Podfile 版本约束规则）。 如果运行命令 pod update 不携带指定Pod库的名字， CocoaPods 将更新每个在 Podfile 中的Pod库到可用的最新版本。（Pod库的可用的最新版本也应该是遵循 Podfile 中Pod库的版本约束规则) 期望使用方式利用 pod update PODNAME ，你将可以能够只更新 一个指定的Pod库（检查是否有可更新的版本并根据版本约定规则更新到最新的版本）。相反的 pod install 不会去更新已经安装过的Pod库的版本。 当你添加一个Pod库到你的 Podfile 文件， 你应该使用 pod install 而不是 pod update - 去安装这个新的Pod库，不用担心这个过程中去更新其它已经安装过的Pod库带来的问题。 你应该只使用 pod udpate 当你想要跟新某一个特定的Pod库（或者所有项目中的Pod库） 提交你的Podfile.lock文件如上面所描述的，即使你们共享项目使用的策略是不提交 Pods 文件夹到你的工程，你应该始终 Commit &amp; Push 你的 Podfile.lock 文件到工程。 否则，将破坏上面解释的关于 pod install 能够保证锁住你已经安装过的Pod库版本的整个逻辑。 场景例子下面是一个场景来阐述在一个项目的生命周期中遇到的各种情况 场景1：User1 创建了项目Project User1 创建了一个Project，想使用 A , B , C 三个Pod库。紧接着他创建了一个 Podfile 里面添加了这三个库，并运行了 pod install 命令。 这样 CocoaPods 安装了 A , B , C 删个Pod库，我们假定这个时候三个库的版本都是 1.0.0 。 这时候生成的 Podfile.lock 将记录和跟踪 A , B , C 这三个库是安装的 1.0.0 版本。 提示，因为第一次运行 pod install 命令的时候， Pods.xcodeproj 工程文件并不存在，命令也将创建 Pods.xcodeproj 工程文件和 .xcworkspace 项目空间文件。但是这只是命令的附带作用，并不是它的主要作用。 场景2：User1 添加一个新的Pod库 后面，User1 想要添加一个Pod库 D 到 Podfile 文件中。 然后运行了 pod install ，这样的话即使 B 库的维护者发布了版本 1.1.0 ，项目也将继续使用 B 库的 1.0.0 版本 - 因为 User1 只是想添加Pod库 D 到项目中，并不想去更新Pod库 B 。 这个地方一些人理解错了，因为这个场景下他们用 pod update - 可能认为这样使用是“我想去用这个新的Pod库而需要更新我的Project项目”？- 来代替 pod install - 在Project项目中安装一个Pod库。 场景3：User2 加入了Project的开发 User2 从未在这个Project项目中开发过。加入项目组后。User2 克隆了这个项目仓库，然后使用 pod install 。 Podfile.lock （如上面提到应该commit &amp; push到仓库中的文件）内容里将保证项目组的所有人都获取到一致版本号的Pod库。就像User1 正在使用的项目一样。 即使 Pod库 C 现在有可用的最新版本 1.2.0 ， User2 也只会安装Pod库 C 的 1.0.0 版本。因为这个项目使用的Pod库 C 的版本信息 1.0.0 是保存在项目的 Podfile.lock 文件中的（这也是文件名这样命名的原因）。 场景4：检查Pod库是否有新版本 后面， User1 想要检查项目中的Pod库是否有新的版本可用。运行 pod outdated 命令将告诉我们 Pod库 B 有 1.0.0 的新版本，Pod库 C 有 1.2.0 的新版本。 User1 决定他们需要更新Pod库 B ，但是不更新 C ; 所以应该运行 pod update B 命令。这个命令将更新Pod库 B 从版本 1.0.0 到 1.1.0 （相应的更新 Podfile.lock 文件）但是会保持Pod库 C 版本还是 1.0.0 （不会被更新到最新的 1.2.0 版本）。 在 Podfile 使用确定的版本号也是不够的有人会说为什么不在 Podfile 文件中给所有的Pod库指定版本号，例如 pod &#39;A&#39;, &#39;1.0.0&#39; ，这足以保证每个项目参与者都获得一样的Pod库的版本。 这样一来，当只是添加一个新的Pod库的时候，使用 pod update 命令。也不会更新其他Pod库的风险，因为每个库的版本号已经通过 Podfile 文件指定好成唯一的版本号。 但是，这样做也不能完全的保证我们上面提到的 User1 和 User2 获取到的所有Pod库都是一样的版本。 一个典型的例子是Pod库 A 在它的 pod.spec 文件中声明了依赖（ dependency &#39;A2&#39;, ~&gt; &#39;3.0&#39;）的Pod库 A2 。在这个场景下，虽然能保证 User1 和 User2 在Pod库 A 的版本保证都是 1.0.0 。但是： User1 可能最后项目的Pod库 A2 的版本是 3.4 （如过当时 A2 的最新版本是 3.4） 当 User2 后面加入项目后使用 pod install ， User2的 A2 版本好可能是 3.5 (因为 A2 库的维护者可能这个时候已经发布了一个新版本） 所以唯一能够保证项目组中所有成员都在所有Pod库都在一致的版本下的方法就是使用 Podfie.lock 和 正确地使用 pod install vs. pod update 。 Ref: CocoaPods Guides","categories":[],"tags":[{"name":"CocoaPods","slug":"CocoaPods","permalink":"http://example.com/tags/CocoaPods/"}]}],"categories":[],"tags":[{"name":"CocoaPods","slug":"CocoaPods","permalink":"http://example.com/tags/CocoaPods/"}]}