<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title></title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-01-28T11:54:15.820Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Adam</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Pod install vs. Pod update (译）</title>
    <link href="http://example.com/2022/01/28/Pod-install-vs-Pod-update-%E8%AF%91/"/>
    <id>http://example.com/2022/01/28/Pod-install-vs-Pod-update-%E8%AF%91/</id>
    <published>2022-01-28T11:51:40.000Z</published>
    <updated>2022-01-28T11:54:15.820Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>很多人开始使用 <code>CocoaPods</code> 认为 <code>pod install</code> 只在第一次使用 CocoaPods 新建项目的时候使用，然后使用 <code>pod update</code> 。这么理解完全不对。</p><p>这片文章的目的就是来解释什么时候你应该使用 <code>pod install</code> 和 什么时候你应该使用 <code>pod update</code> 。</p><p><em>TL;DR:</em></p><ul><li>使用 <code>pod install</code> 来在你的项目中 <em>安装新的 <code>pods</code></em> 。<strong>即使你已经有 <code>Podfile</code> 并且先前已经运行过 <code>pod install</code> 命令</strong>;  即便你刚使用 CocoaPods 向项目中添加/删除 Pods。</li><li>在你想去<strong>更新Pods到一个最新的版本</strong>的时候才使用 <code>pod update [PODNAME]</code></li></ul><h1 id="命令详细说明"><a href="#命令详细说明" class="headerlink" title="命令详细说明"></a>命令详细说明</h1><blockquote><p>注意:  <code>install</code> vs. <code>update</code> 这两个单词不单单是 CocoaPods 专有。它们是受很多其他依赖管理工具的启发，例如 <code>bundler</code> , <code>RubyGems</code> 和 <code>composer</code> , 它们也有着同样类似的命令，拥有着相同的行为和意图。</p></blockquote><h2 id="pod-install-命令"><a href="#pod-install-命令" class="headerlink" title="pod install 命令"></a>pod install 命令</h2><p>这个命令经常是在第一次去检查你项目中的 Pods时候使用，也是每次你编辑你的 <code>Podfile</code> 去添加、更新、删除一个pod的时候使用。</p><ul><li>每次 <code>pod install</code> 命令运行的时候 - 下载并且安装新的pods库 - 它将每一个安装的pod版本写入 <code>Podfile.lock</code> 文件。这个 <code>Podfile.lock</code> 文件追踪安装的每一个pod库的版本并且<em><strong>锁定</strong></em>这些版本号。</li><li>当你使用 <code>pod install</code> ，它仅仅处理<strong>未存在</strong>于 <code>Podfile.lock</code> 中的依赖pod库。<ol><li>对于存在于 <code>Podlock.file</code>  中的pod库，该指令只下载 <code>Podfile.lock</code> 中指定版本的对应Pod库，并不会尝试去检查是否有最新的版本可用。</li><li>对于不存在于 <code>Podlock.file</code> 中的pod库，该指令在 <code>Podfile</code> 中查找该Pod库的版本描述（比如： <code>pod &#39;MyPod&#39;, &#39;~&gt;1.2&#39;</code> ）。</li></ol></li></ul><h2 id="pod-outdated-命令"><a href="#pod-outdated-命令" class="headerlink" title="pod outdated 命令"></a>pod outdated 命令</h2><p>当运行命令 <code>pod outdated</code> , CocoaPods 将列出所有 <code>Podfile.lock</code> （包含当前项目中安装Pod库版本信息）文件有新版本可用的Pod库列表。这意味着加入你运行 <code>pod update PODNAME</code> 命令（PODNAME为前面命令列出的Pod库列表），这些Pod库将会被升级到最新版本 - 只要这个最新的版本仍然符合项目中 <code>Podfile</code> 版本约束规则，例如 <code>pod &#39;MyPod&#39;, &#39;~&gt;x.y&#39;</code> 。</p><p>命令运行后你能看到这样的颜色Tag输出帮助你更快的查看哪些Pod会在你 <code>pod update</code> 命令后进行改变。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">The color indicates what happens when you run `pod update`</span><br><span class="line">&lt;green&gt; - Will be updated to the newest version</span><br><span class="line">&lt;blue&gt; - Will be updated, but not to the newest version because of specified version in Podfile</span><br><span class="line">&lt;red&gt; - Will not be updated because of specified version in Podfile</span><br></pre></td></tr></table></figure><h2 id="pod-update-命令"><a href="#pod-update-命令" class="headerlink" title="pod update 命令"></a>pod update 命令</h2><p>当运行命令 <code>pod update PODNAME</code> ，CocoaPods 将尝试去查找名字为 <code>PODNAME</code> 的Pod库的最新版本，并不会去查阅 <code>Podfile.lock</code> 文件中的该Pod库的版本信息。命令将更新这个Pod库到最新可用的版本（只要这个最新的版本仍然符合项目中 <code>Podfile</code> 版本约束规则）。</p><p>如果运行命令 <code>pod update</code> 不携带指定Pod库的名字， CocoaPods 将更新每个在 <code>Podfile</code> 中的Pod库到可用的最新版本。（Pod库的可用的最新版本也应该是遵循 <code>Podfile</code> 中Pod库的版本约束规则)</p><h1 id="期望使用方式"><a href="#期望使用方式" class="headerlink" title="期望使用方式"></a>期望使用方式</h1><p>利用 <code>pod update PODNAME</code> ，你将可以能够只<strong>更新</strong> 一个指定的Pod库（检查是否有可更新的版本并根据版本约定规则更新到最新的版本）。相反的 <code>pod install</code> 不会去更新已经安装过的Pod库的版本。</p><p>当你添加一个Pod库到你的 <code>Podfile</code> 文件， 你应该使用 <code>pod install</code> 而不是 <code>pod update</code> - 去安装这个新的Pod库，不用担心这个过程中去更新其它已经安装过的Pod库带来的问题。</p><p>你应该只使用 <code>pod udpate</code> 当你想要跟新某一个特定的Pod库（或者所有项目中的Pod库）</p><h1 id="提交你的Podfile-lock文件"><a href="#提交你的Podfile-lock文件" class="headerlink" title="提交你的Podfile.lock文件"></a>提交你的Podfile.lock文件</h1><p>如上面所描述的，即使你们共享项目使用的策略是不提交 <code>Pods</code> 文件夹到你的工程，<strong>你应该始终 Commit &amp; Push 你的</strong> <code>Podfile.lock</code>  <strong>文件到工程</strong>。</p><p><em>否则，将破坏上面解释的关于 <code>pod install</code> 能够保证锁住你已经安装过的Pod库版本的整个逻辑。</em></p><h1 id="场景例子"><a href="#场景例子" class="headerlink" title="场景例子"></a>场景例子</h1><p>下面是一个场景来阐述在一个项目的生命周期中遇到的各种情况</p><ul><li>场景1：User1 创建了项目Project  User1 创建了一个Project，想使用 <code>A</code> , <code>B</code> , <code>C</code> 三个Pod库。紧接着他创建了一个 <code>Podfile</code> 里面添加了这三个库，并运行了 <code>pod install</code> 命令。  这样 CocoaPods 安装了  <code>A</code> , <code>B</code> , <code>C</code>  删个Pod库，我们假定这个时候三个库的版本都是 <code>1.0.0</code> 。  这时候生成的 <code>Podfile.lock</code> 将记录和跟踪  <code>A</code> , <code>B</code> , <code>C</code> 这三个库是安装的 <code>1.0.0</code> 版本。<blockquote><p><em>提示，因为第一次运行 <code>pod install</code> 命令的时候， <code>Pods.xcodeproj</code> 工程文件并不存在，命令也将创建 <code>Pods.xcodeproj</code> 工程文件和 <code>.xcworkspace</code> 项目空间文件。但是这只是命令的附带作用，并不是它的主要作用。</em></p></blockquote></li><li>场景2：User1 添加一个新的Pod库  后面，User1 想要添加一个Pod库 <code>D</code> 到 <code>Podfile</code>  文件中。  然后运行了 <code>pod install</code> ，这样的话即使 <code>B</code> 库的维护者发布了版本 <code>1.1.0</code> ，项目也将继续使用 <code>B</code> 库的 <code>1.0.0</code> 版本 - 因为 User1 只是想添加Pod库 <code>D</code> 到项目中，并不想去更新Pod库 <code>B</code> 。<blockquote><p>这个地方一些人理解错了，因为这个场景下他们用 <code>pod update</code> - 可能认为这样使用是“我想去用这个新的Pod库而需要更新我的Project项目”？-  来代替 <code>pod install</code> - 在Project项目中安装一个Pod库。</p></blockquote></li><li>场景3：User2 加入了Project的开发  User2 从未在这个Project项目中开发过。加入项目组后。User2 克隆了这个项目仓库，然后使用 <code>pod install</code> 。  <code>Podfile.lock</code> （如上面提到应该commit &amp; push到仓库中的文件）内容里将保证项目组的所有人都获取到一致版本号的Pod库。就像User1 正在使用的项目一样。  即使 Pod库 <code>C</code> 现在有可用的最新版本 <code>1.2.0</code> ， User2 也只会安装Pod库 <code>C</code> 的 <code>1.0.0</code> 版本。因为这个项目使用的Pod库 <code>C</code> 的版本信息 <code>1.0.0</code> 是保存在项目的 <code>Podfile.lock</code> 文件中的（这也是文件名这样命名的原因）。</li><li>场景4：检查Pod库是否有新版本  后面， User1 想要检查项目中的Pod库是否有新的版本可用。运行 <code>pod outdated</code> 命令将告诉我们 Pod库 <code>B</code> 有 <code>1.0.0</code> 的新版本，Pod库 <code>C</code> 有 <code>1.2.0</code> 的新版本。  User1 决定他们需要更新Pod库 <code>B</code> ，但是不更新 <code>C</code> ;  所以应该运行 <code>pod update B</code> 命令。这个命令将更新Pod库 <code>B</code> 从版本 <code>1.0.0</code> 到 <code>1.1.0</code>  （相应的更新 <code>Podfile.lock</code> 文件）但是会保持Pod库 <code>C</code> 版本还是 <code>1.0.0</code> （不会被更新到最新的 <code>1.2.0</code> 版本）。</li></ul><h1 id="在-Podfile-使用确定的版本号也是不够的"><a href="#在-Podfile-使用确定的版本号也是不够的" class="headerlink" title="在 Podfile 使用确定的版本号也是不够的"></a>在 <code>Podfile</code> 使用确定的版本号也是不够的</h1><p>有人会说为什么不在 <code>Podfile</code> 文件中给所有的Pod库指定版本号，例如 <code>pod &#39;A&#39;, &#39;1.0.0&#39;</code> ，这足以保证每个项目参与者都获得一样的Pod库的版本。</p><p>这样一来，当只是添加一个新的Pod库的时候，使用 <code>pod update</code> 命令。也不会更新其他Pod库的风险，因为每个库的版本号已经通过 <code>Podfile</code> 文件指定好成唯一的版本号。</p><p>但是，这样做也不能完全的保证我们上面提到的 User1 和 User2 获取到的所有Pod库都是一样的版本。</p><p>一个典型的例子是Pod库 <code>A</code>  在它的 <code>pod.spec</code> 文件中声明了依赖（ <code>dependency &#39;A2&#39;, ~&gt; &#39;3.0&#39;</code>）的Pod库 <code>A2</code> 。在这个场景下，虽然能保证 User1 和 User2 在Pod库 <code>A</code> 的版本保证都是 <code>1.0.0</code> 。但是：</p><ul><li>User1 可能最后项目的Pod库 <code>A2</code> 的版本是 <code>3.4</code> （如过当时 <code>A2</code> 的最新版本是 <code>3.4</code>）</li><li>当 User2 后面加入项目后使用 <code>pod install</code> ， User2的 <code>A2</code> 版本好可能是 <code>3.5</code> (因为 <code>A2</code> 库的维护者可能这个时候已经发布了一个新版本）</li></ul><p>所以唯一能够保证项目组中所有成员都在所有Pod库都在一致的版本下的方法就是使用 <code>Podfie.lock</code> 和 正确地使用 <code>pod install</code> vs. <code>pod update</code> 。</p><p>Ref:</p><p><a href="https://guides.cocoapods.org/using/pod-install-vs-update.html">CocoaPods Guides</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;很多人开始使用 &lt;code&gt;CocoaPods&lt;/code&gt; 认为 &lt;code&gt;pod install&lt;/code&gt; 只在第一次使用 Coc</summary>
      
    
    
    
    
    <category term="CocoaPods" scheme="http://example.com/tags/CocoaPods/"/>
    
  </entry>
  
</feed>
